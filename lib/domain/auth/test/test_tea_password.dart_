import 'package:flowers_app/dev/log/log.dart';

/// Tiny Encryption Algorithm
void main() {
  const str = r'12$34\567890-=qwertyuiop[]asdfghjkl;\`zxcvbnm,./ !@#%^&*()_+QWERTYUIOP{}ASDFGHJKL:"|~ZXCVBNM<>?;1234567890-=!"№%:,.;()_+йцукенгшщзхъЙЦУКЕНГШЩЗХЪфывапролджэёФЫВАПРОЛДЖЭЁ]ячсмитьбю/[ЯЧСМИТЬБЮ?]"';
  final escaped = _escape(str);
  log('escaped(${escaped.length}): $escaped');
  final unescaped = _unescape(escaped);
  log('unescaped(${unescaped.length}): $unescaped');
  if (str == unescaped) {
    log('ok');
  }
  
  const key = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNMЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЁЯЧСМИТЬБЮйцукенгшщзхъфывапролджэёячсмитьбю';
  const values = [
    '123!@#', '123qwe', 'jytfu67YGI&^URT','1234567890-=', '!@#\$%^&*()_+', '!"№%:,.;()_+"', 
    'ЙЦУКЕНГШЩЗХЪ', 'йцукенгшщзхъ', 'ячсмитьбю', '[ЯЧСМИТЬБЮ?',
    'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЁЯЧСМИТЬБЮ?йцукенгшщзхъфывапролджэёячсмитьбю/',
    '; , / ? : @ & = +  - _ . ! ~ *  ( ) #'
  ];
  var err = 0;
  for (final value in values) {
    log('value(${value.length}): $value');
    final encrypted = _encrypt(value, key);
    log('encrypted(${encrypted.length}): $encrypted');
    final decrypted = _decrypt(encrypted, key);
    log('decrypted(${decrypted.length}): $decrypted');
    if (value == decrypted) {
      log('\tOK');
    } else {
      err++;
    }
    log('===============\n');
  }
  if (err > 0) {
    log('ERROR');
  } else {
    log('OK');
  }
}

String _encrypt(String source, String key) {
  final List<int> v = [0, 0];
  final List k = [];
  var s = "";
  final lKey = _escape(key).split(',');  // use escape() so only have single-byte chars to encode
  source = _escape(source);  // use escape() so only have single-byte chars to encode
  // build key directly from 1st 16 chars of password
  k.length = lKey.length;
  for (var i = 0; i < lKey.length; i++) {
    final keySlice = lKey[i];//str4ToLong(keySlice);
    k[i] = keySlice;
  }
  for (var i = 0; i < source.length; i += 8) {  // encode plaintext into s in 64-bit (8 char) blocks
    final slicedV0 = _slice(source, i, i + 4);
    v[0] = str4ToLong(slicedV0);  // ... note this is 'electronic codebook' mode
    final slicedV1 = _slice(source, i + 4, i + 8);
    v[1] = str4ToLong(slicedV1);
    // log('encode slicedV0: $slicedV0');
    // log('encode slicedV1: $slicedV1');
    // log('encode V0: ${v[0]}');
    // log('encode V1: ${v[1]}');
    encode(v, k);
    // log('longToStr4(v[0]): ${longToStr4(v[0])}');
    // log('longToStr4(v[1]): ${longToStr4(v[1])}');
    s += longToStr4(v[0]) + longToStr4(v[1]);
  }
  log('_encrypt s: $s');
  return _escape(escCtrlCh(s));
  // note: if plaintext or password are passed as string objects, rather than strings, this
  // function will throw an 'Object doesn't support this property or method' error
}

// use (16 chars of) 'password' to decrypt 'ciphertext' with xTEA

String _decrypt(String ciphertext, String key) {
  final List<int> v = [0, 0];
  final k = [];
  var s = "";
  final sKey = _escape(key);  // use escape() so only have single-byte chars to encode
  final lKey = sKey.split(',');
  k.length = lKey.length;
  for (var i = 0; i < lKey.length; i++) {
    final keySlice = lKey[i];//str4ToLong(keySlice);
    k[i] = keySlice;
  }
  ciphertext = _unescape(ciphertext);
  ciphertext = unescCtrlCh(ciphertext);
  for (var i = 0; i < ciphertext.length; i += 8) {  // decode ciphertext into s in 64-bit (8 char) blocks
    v[0] = str4ToLong(_slice(ciphertext, i, i + 4));
    v[1] = str4ToLong(_slice(ciphertext, i + 4,i + 8));
    decode(v, k);
    s += longToStr4(v[0]) + longToStr4(v[1]);
  }
  // strip trailing null chars resulting from filling 4-char blocks:
  s = s.replaceAll(RegExp(r'\0+$'), '');
  return _unescape(s);
}

String _escape(String str) {
  return str.split('').map((c) => c.codeUnitAt(0)).join(',');
}
String _unescape(String value) {
  final strCodes = value.split(',');
  // console.log(`strCodes(${strCodes.length}): ${strCodes}`);
  final intCodes = strCodes.map((str) => int.parse(str));
  // console.log(`intCodes(${intCodes.length}): ${intCodes}`);
  // let unescaped = String.fromCharCode(...intCodes);
  // console.log(`unescaped(${unescaped.length}): ${unescaped}`);
  return String.fromCharCodes([...intCodes]);
}

List encode(List v, List k) {
  // Extended TEA: this is the 1997 revised version of Needham & Wheeler's algorithm
  // params: v[2] 64-bit value block; k[4] 128-bit key
  var y = v[0];
  var z = v[1];
  const delta = 0x9E3779B9;
  const limit = delta * 32;
  var sum = 0;
  while (sum != limit) {
    final add1 = int.parse('${k[sum & 3]}');
    // log('encode add1: $add1');
    y += ((z << 4) ^ (z >>> 5)) + (z ^ sum) + add1;
    sum += delta;
    final add2 = int.parse('${k[sum >>> 11 & 3]}');
    // log('encode add2: $add2');
    z += ((y << 4) ^ (y >>> 5)) + (y ^ sum) + add2;
    // note: unsigned right-shift '>>>' is used in place of original '>>', due to lack
    // of 'unsigned' type declaration in JavaScript (thanks to Karsten Kraus for this)
  }
  // log('encode y: $y');
  // log('encode z: $z');
  v[0] = y; 
  v[1] = z;
  return v;
}

List decode(List v, List k) {
  var y = v[0];
  var z = v[1];
  const delta = 0x9E3779B9;
  var sum = delta * 32;
  while (sum != 0) {
    final add2 = int.parse('${k[sum >>> 11 & 3]}');
    // log('decode add2: $add2');
    z -= ((y << 4) ^ (y >>> 5)) + (y ^ sum) + add2;
    sum -= delta;
    final add1 = int.parse('${k[sum & 3]}');
    // log('decode add1: $add1');
    y -= ((z << 4) ^ (z >>> 5)) + (z ^ sum) + add1;
  }
  v[0] = y; 
  v[1] = z;
  return v;
}

// supporting functions

int str4ToLong(String s) {  // convert 4 chars of s to a numeric long
  var v = 0;
  for (var i = 0; i < s.length; i++) {
    v |= s.codeUnitAt(i) << i * 8;
  }
  return v.isNaN ? 0 : v;
}
String longToStr4(int v) {  // convert a numeric long to 4 char string
  final s = String.fromCharCodes([v & 0xFF, v >> 8 & 0xFF, v >> 16 & 0xFF, v >> 24 & 0xFF]);
  return s;
}
String escCtrlCh(String str) {  // escape control chars which might cause problems with encrypted texts
  return str.replaceAllMapped(RegExp(r'[\0\t\n\v\f\r\xa0' + "'" + '"' + '!]'), (match) {
    final matchedStr = match.group(0).toString();
    return '! ${matchedStr.codeUnitAt(0)} !'; 
  });
}
String unescCtrlCh(String str) {  // unescape potentially problematic nulls and control characters
  return str.replaceAllMapped(RegExp(r'! \d\d?\d? !'), (match) { 
    final matchedStr = match.group(0).toString();
    final sliced = _slice(matchedStr, 1, -1);
    return String.fromCharCode(int.parse(sliced)); 
  });
}
String _slice(String subject, [int start = 0, int? end]) {
  int _realEnd;
  int _realStart = start < 0 ? subject.length + start : start;
  if (end is! int) {
    _realEnd = subject.length;
  } else {
    _realEnd = end < 0 ? subject.length + end : end;
    if (_realEnd > subject.length) {
      _realEnd = subject.length;
    }
    if (_realStart > subject.length) {
      _realStart = subject.length;
    }
  }
  return subject.substring(_realStart, _realEnd);
}
