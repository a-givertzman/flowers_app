import 'package:flowers_app/dev/log/log.dart';

void main() {
  // const str = r'12$34\567890-=qwertyuiop[]asdfghjkl;\`zxcvbnm,./ !@#%^&*()_+QWERTYUIOP{}ASDFGHJKL:"|~ZXCVBNM<>?;1234567890-=!"№%:,.;()_+йцукенгшщзхъЙЦУКЕНГШЩЗХЪфывапролджэёФЫВАПРОЛДЖЭЁ]ячсмитьбю/[ЯЧСМИТЬБЮ?]"';
  // final escaped = _escape(str);
  // log('escaped(${escaped.length}): $escaped');
  // final unescaped = _unescape(escaped);
  // log('unescaped(${unescaped.length}): $unescaped');
  // if (str == unescaped) {
  //   log('ok');
  // }
  
  const key = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNMЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЁЯЧСМИТЬБЮйцукенгшщзхъфывапролджэёячсмитьбю';
  const values = [
    '123!@#', '123qwe', 'jytfu67YGI&^URT','1234567890-=', '!@#\$%^&*()_+', '!"№%:,.;()_+"', 
    'ЙЦУКЕНГШЩЗХЪ', 'йцукенгшщзхъ', 'ячсмитьбю', '[ЯЧСМИТЬБЮ?',
    'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЁЯЧСМИТЬБЮ?йцукенгшщзхъфывапролджэёячсмитьбю/',
    '; , / ? : @ & = +  - _ . ! ~ *  ( ) #'
  ];
  var err = 0;
  for (final value in values) {
    log('value(${value.length}): $value');
    final encrypted = _encrypt(value, key);
    log('encrypted(${encrypted.length}): $encrypted');
    final decrypted = _decrypt(encrypted, key);
    log('decrypted(${decrypted.length}): $decrypted');
    if (value == decrypted) {
      log('\tOK');
    } else {
      err++;
    }
    log('===============\n');
  }
  if (err > 0) {
    log('ERROR');
  } else {
    log('OK');
  }
}

String _encrypt(String source, String key) {
  var s = "";
  final lKey = _escape(key);
  final List<int> lSource = _escape(source);
  // log('_escaped: ${_escape(source)}');
  final List<int> k = List.filled(lKey.length, 0);
  for (var i = 0; i < lKey.length; i++) {
    final keySlice = lKey[i];
    k[i] = keySlice;
  }
  for (var i = 0; i < lSource.length; i++) {
    s += _encode(lSource[i], k).toString();
    s += (i < lSource.length -1) ? ',' : '';
  }
  // log('_encrypt s: $s');
  return s;
}

String _decrypt(String source, String key) {
  var s = "";
  final lKey = _escape(key);
  final List<int> lSource = source.split(',').map((str) => int.parse(str)).toList();
  final List<int> k = List.filled(lKey.length, 0);
  for (var i = 0; i < lKey.length; i++) {
    final keySlice = lKey[i];
    k[i] = keySlice;
  }
  for (var i = 0; i < lSource.length; i++) {
    s += _decode(lSource[i], k).toString();
    s += (i < lSource.length -1) ? ',' : '';
  }
  return _unescape(s);
}

List<int> _escape(String str) {
  return str.split('').map((_char) => _char.codeUnitAt(0)).toList();
}
String _unescape(String value) {
  final strCodes = value.split(',');
  final intCodes = strCodes.map((str) => int.parse(str));
  return String.fromCharCodes([...intCodes]);
}

int _encode(int v, List<int> k) {
  var y = v;
  var z = v;
  const delta = 0x9E3779B9;
  var sum = 0;
  for (var i = 0; i < 32; i++) {
    final add1 = k[sum & 3];
    y += (add1 ^ i) + add1;
    sum += delta;
  }
  // log(index);
  return y;
}

int _decode(int v, List<int> k) {
  var y = v;
  var z = v;
  const delta = 0x9E3779B9;
  var sum = delta * 32;
  for (var i = 31; i >= 0; i--) {
    final add2 = k[sum & 3];
    z -= (add2 ^ i) + add2;
    sum -= delta;
  }
  return z;
}